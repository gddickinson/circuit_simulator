"""Circuit Simulator - Physics Module--------------------------------This module contains the physical laws and equations used by the circuit simulator."""import mathimport numpy as npimport logginglogger = logging.getLogger(__name__)class Physics:    """Physics engine for circuit simulation."""    # Physical constants    BOLTZMANN = 1.380649e-23  # Boltzmann constant (J/K)    ELECTRON_CHARGE = 1.602176634e-19  # Elementary charge (C)    ROOM_TEMP_K = 300  # Room temperature in Kelvin    THERMAL_VOLTAGE = BOLTZMANN * ROOM_TEMP_K / ELECTRON_CHARGE  # Thermal voltage at room temp (V)    @staticmethod    def ohms_law_voltage(current, resistance):        """Calculate voltage using Ohm's Law: V = I * R.        Args:            current: Current in amperes            resistance: Resistance in ohms        Returns:            Voltage in volts        """        return current * resistance    @staticmethod    def ohms_law_current(voltage, resistance):        """Calculate current using Ohm's Law: I = V / R.        Args:            voltage: Voltage in volts            resistance: Resistance in ohms        Returns:            Current in amperes        """        if resistance == 0:            logger.warning("Division by zero in Ohm's law: resistance is zero")            return float('inf') if voltage >= 0 else float('-inf')  # Infinite current        return voltage / resistance    @staticmethod    def ohms_law_resistance(voltage, current):        """Calculate resistance using Ohm's Law: R = V / I.        Args:            voltage: Voltage in volts            current: Current in amperes        Returns:            Resistance in ohms        """        if current == 0:            logger.warning("Division by zero in Ohm's law: current is zero")            return float('inf')  # Infinite resistance        return voltage / current    @staticmethod    def power_vi(voltage, current):        """Calculate power using P = V * I.        Args:            voltage: Voltage in volts            current: Current in amperes        Returns:            Power in watts        """        return voltage * current    @staticmethod    def power_i2r(current, resistance):        """Calculate power using P = I^2 * R.        Args:            current: Current in amperes            resistance: Resistance in ohms        Returns:            Power in watts        """        return current**2 * resistance    @staticmethod    def power_v2r(voltage, resistance):        """Calculate power using P = V^2 / R.        Args:            voltage: Voltage in volts            resistance: Resistance in ohms        Returns:            Power in watts        """        if resistance == 0:            logger.warning("Division by zero in power calculation: resistance is zero")            return float('inf')  # Infinite power        return voltage**2 / resistance    @staticmethod    def capacitor_charge(capacitance, voltage):        """Calculate charge on a capacitor using Q = C * V.        Args:            capacitance: Capacitance in farads            voltage: Voltage in volts        Returns:            Charge in coulombs        """        return capacitance * voltage    @staticmethod    def capacitor_energy(capacitance, voltage):        """Calculate energy stored in a capacitor using E = 0.5 * C * V^2.        Args:            capacitance: Capacitance in farads            voltage: Voltage in volts        Returns:            Energy in joules        """        return 0.5 * capacitance * voltage**2    @staticmethod    def capacitor_current(capacitance, dvdt):        """Calculate current through a capacitor using I = C * dV/dt.        Args:            capacitance: Capacitance in farads            dvdt: Rate of change of voltage in volts/second        Returns:            Current in amperes        """        return capacitance * dvdt    @staticmethod    def inductor_voltage(inductance, didt):        """Calculate voltage across an inductor using V = L * dI/dt.        Args:            inductance: Inductance in henries            didt: Rate of change of current in amperes/second        Returns:            Voltage in volts        """        return inductance * didt    @staticmethod    def inductor_energy(inductance, current):        """Calculate energy stored in an inductor using E = 0.5 * L * I^2.        Args:            inductance: Inductance in henries            current: Current in amperes        Returns:            Energy in joules        """        return 0.5 * inductance * current**2    @staticmethod    def inductor_flux(inductance, current):        """Calculate magnetic flux in an inductor using Φ = L * I.        Args:            inductance: Inductance in henries            current: Current in amperes        Returns:            Magnetic flux in webers        """        return inductance * current    @staticmethod    def series_resistance(*resistances):        """Calculate total resistance for resistors in series: R_total = R1 + R2 + ...        Args:            *resistances: Resistances in ohms        Returns:            Total resistance in ohms        """        return sum(resistances)    @staticmethod    def parallel_resistance(*resistances):        """Calculate total resistance for resistors in parallel: 1/R_total = 1/R1 + 1/R2 + ...        Args:            *resistances: Resistances in ohms        Returns:            Total resistance in ohms        """        # Check for zero resistances        if 0 in resistances:            return 0  # Short circuit        if not resistances:            return 0        # Calculate sum of reciprocals        sum_reciprocal = sum(1 / r for r in resistances)        if sum_reciprocal == 0:            return float('inf')  # Open circuit        return 1 / sum_reciprocal    @staticmethod    def series_capacitance(*capacitances):        """Calculate total capacitance for capacitors in series: 1/C_total = 1/C1 + 1/C2 + ...        Args:            *capacitances: Capacitances in farads        Returns:            Total capacitance in farads        """        # Check for zero capacitances        if 0 in capacitances:            return 0  # Open circuit        if not capacitances:            return 0        # Calculate sum of reciprocals        sum_reciprocal = sum(1 / c for c in capacitances)        if sum_reciprocal == 0:            return float('inf')  # Short circuit        return 1 / sum_reciprocal    @staticmethod    def parallel_capacitance(*capacitances):        """Calculate total capacitance for capacitors in parallel: C_total = C1 + C2 + ...        Args:            *capacitances: Capacitances in farads        Returns:            Total capacitance in farads        """        return sum(capacitances)    @staticmethod    def series_inductance(*inductances):        """Calculate total inductance for inductors in series: L_total = L1 + L2 + ...        Args:            *inductances: Inductances in henries        Returns:            Total inductance in henries        """        return sum(inductances)    @staticmethod    def parallel_inductance(*inductances):        """Calculate total inductance for inductors in parallel: 1/L_total = 1/L1 + 1/L2 + ...        Args:            *inductances: Inductances in henries        Returns:            Total inductance in henries        """        # Check for zero inductances        if 0 in inductances:            return 0  # Short circuit        if not inductances:            return 0        # Calculate sum of reciprocals        sum_reciprocal = sum(1 / l for l in inductances)        if sum_reciprocal == 0:            return float('inf')  # Open circuit        return 1 / sum_reciprocal    @staticmethod    def voltage_divider(vin, r1, r2):        """Calculate output voltage of a voltage divider: Vout = Vin * R2 / (R1 + R2).        Args:            vin: Input voltage in volts            r1: Upper resistor in ohms            r2: Lower resistor in ohms        Returns:            Output voltage in volts        """        if r1 + r2 == 0:            logger.warning("Division by zero in voltage divider: sum of resistances is zero")            return 0        return vin * r2 / (r1 + r2)    @staticmethod    def current_divider(iin, r1, r2):        """Calculate current through r1 in a current divider: I1 = Iin * R2 / (R1 + R2).        Args:            iin: Input current in amperes            r1: First resistor in ohms            r2: Second resistor in ohms        Returns:            Current through r1 in amperes        """        if r1 + r2 == 0:            logger.warning("Division by zero in current divider: sum of resistances is zero")            return 0        return iin * r2 / (r1 + r2)    @staticmethod    def rc_time_constant(resistance, capacitance):        """Calculate the time constant for an RC circuit: τ = R * C.        Args:            resistance: Resistance in ohms            capacitance: Capacitance in farads        Returns:            Time constant in seconds        """        return resistance * capacitance    @staticmethod    def rl_time_constant(resistance, inductance):        """Calculate the time constant for an RL circuit: τ = L / R.        Args:            resistance: Resistance in ohms            inductance: Inductance in henries        Returns:            Time constant in seconds        """        if resistance == 0:            logger.warning("Division by zero in RL time constant: resistance is zero")            return float('inf')        return inductance / resistance    @staticmethod    def lcr_resonant_frequency(inductance, capacitance):        """Calculate the resonant frequency for an LC circuit: f = 1 / (2π * sqrt(L * C)).        Args:            inductance: Inductance in henries            capacitance: Capacitance in farads        Returns:            Resonant frequency in hertz        """        if inductance <= 0 or capacitance <= 0:            logger.warning("Invalid parameters in resonant frequency calculation")            return 0        return 1 / (2 * math.pi * math.sqrt(inductance * capacitance))    @staticmethod    def diode_current(voltage, saturation_current, thermal_voltage=None):        """Calculate current through a diode using the Shockley diode equation.        I = Is * (e^(V/Vt) - 1)        Args:            voltage: Voltage across the diode in volts            saturation_current: Reverse saturation current in amperes            thermal_voltage: Thermal voltage in volts (default: ~26mV at room temperature)        Returns:            Current through the diode in amperes        """        if thermal_voltage is None:            thermal_voltage = Physics.THERMAL_VOLTAGE        # Prevent overflow for large voltages        if voltage > 100 * thermal_voltage:            return saturation_current * math.exp(100)        return saturation_current * (math.exp(voltage / thermal_voltage) - 1)    @staticmethod    def transistor_collector_current(base_current, beta):        """Calculate collector current for a BJT.        Ic = β * Ib        Args:            base_current: Base current in amperes            beta: Current gain        Returns:            Collector current in amperes        """        return beta * base_current    @staticmethod    def resonant_circuit_impedance(resistance, inductance, capacitance, frequency):        """Calculate impedance of an RLC circuit.        Args:            resistance: Resistance in ohms            inductance: Inductance in henries            capacitance: Capacitance in farads            frequency: Frequency in hertz        Returns:            Impedance in ohms (complex number)        """        if frequency <= 0 or capacitance <= 0:            logger.warning("Invalid parameters in impedance calculation")            return complex(resistance, 0)        # Angular frequency        omega = 2 * math.pi * frequency        # Reactances        xl = omega * inductance  # Inductive reactance        xc = -1 / (omega * capacitance)  # Capacitive reactance        # Total impedance        return complex(resistance, xl + xc)    @staticmethod    def impedance_magnitude(impedance):        """Calculate the magnitude of an impedance.        Args:            impedance: Complex impedance        Returns:            Magnitude of impedance in ohms        """        return abs(impedance)    @staticmethod    def impedance_phase(impedance):        """Calculate the phase angle of an impedance.        Args:            impedance: Complex impedance        Returns:            Phase angle in radians        """        return math.atan2(impedance.imag, impedance.real)